#include <fstream>
#include <iostream>
#include <cstdlib>
#include <GL/gl.h>
#include <GL/glut.h>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <vector>
#include <assert.h>

//#include "bmp.h"
#include "Game.h"
#include "Play.h"
#include "Pause.h"
#include "Clear.h"
#include "Failure.h"

using namespace std;

//update function for Play class
Base *Pause::update(Play* play) {
    Base *temp_base = this;
    /*
  if (seq_trig_ == STARTKEY)
    temp_base = new Pause;
  else if (seq_trig_ == PAUSE)
    temp_base = new Pause;
  else if(seq_trig_ == FAILURE)
    temp_base = new Failure;
  else if (seq_trig_ == EXIT)
    exit(0);
  else temp_base = this;
    */
  return temp_base;
  
}

//keybord handler
void Pause::keybord_handler(unsigned char key) {
  /*
  int player1_x, player1_y, player2_x, player2_y;
  get_player_position(PLAYER1, player1_x, player1_y);
  get_player_position(PLAYER2, player2_x, player2_y);

  switch(key) {
  case 't':
    seq_trig_ = Base::STARTKEY;
    break;
  case 'q': 
  case 'Q':
  case '\033':  // '\033' は ESC の ASCII コード 
    seq_trig_ = Base::EXIT;
    break;    
 case 'a':
   if (get_state(player1_x - 1, player1_y) == FLOOR) {
      set_state(PLAYER1, player1_x - 1, player1_y);
      set_state(FLOOR, player1_x, player1_y);
    } 
    break;
  case 'd':
    if (get_state(player1_x + 1, player1_y) == FLOOR) {
      set_state(PLAYER1, player1_x + 1, player1_y);
      set_state(FLOOR, player1_x, player1_y);
    }
    break;
  case 'w':
    if (get_state(player1_x, player1_y + 1) == FLOOR) {
      set_state(PLAYER1, player1_x, player1_y + 1);
      set_state(FLOOR, player1_x, player1_y);
    } 
    break;
  case 'x':
    if (get_state(player1_x, player1_y - 1) == FLOOR) {
      set_state(PLAYER1, player1_x, player1_y - 1);
      set_state(FLOOR, player1_x, player1_y);
    }
    break;
  case 's':
      set_state(BOMB, player1_x, player1_y);
      set_state(PLAYER1, player1_x + 1, player1_y);
  break;
  case 'j':
   if (get_state(player2_x - 1, player2_y) == FLOOR) {
      set_state(PLAYER2, player2_x - 1, player2_y);
      set_state(FLOOR, player2_x, player2_y);
    } 
    break;
  case 'l':
    if (get_state(player2_x + 1, player2_y) == FLOOR) {
      set_state(PLAYER2, player2_x + 1, player2_y);
      set_state(FLOOR, player2_x, player2_y);
    }
    break;
  case 'i':
    if (get_state(player2_x, player2_y + 1) == FLOOR) {
      set_state(PLAYER2, player2_x, player2_y + 1);
      set_state(FLOOR, player2_x, player2_y);
    } 
    break;
  case 'm':
    if (get_state(player2_x, player2_y - 1) == FLOOR) {
      set_state(PLAYER2, player2_x, player2_y - 1);
      set_state(FLOOR, player2_x, player2_y);
    }
    break;
  case 'k':
      set_state(BOMB, player2_x, player2_y);
      set_state(PLAYER2, player2_x + 1, player2_y);
      break;
  default:
    break;
  }
  */
}

//draw function
void Pause::draw() {
}
