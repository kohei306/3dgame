#ifndef GAME_H_
#define GAME_H_

class Game
{
 public:
  static Game *instance();
  static void create();
  static void destroy();
  enum ImageID{ PLAYER1= 0, 
		PLAYER2,
		BOMB_UP,
		FIRE_UP,
		HORI_FIRE,
		VER_FIRE,
		ENEMY,
		WALL,
		BRICK,
		FLOOR,
		BOMB,
		CROSS_FIRE,
		BRICK_FIRE_UP,
		BRICK_BOMB_UP
	};

  //draw function
  void set_texture_id(GLuint t_id);
  GLuint get_texture_id();
  void draw_object();
  void draw_all_objects();
  void set_image_id(ImageID img_id);
  ImageID get_image_id();
  void set_vertex_x(int x);
  void set_vertex_y(int y);
  int get_vertex_x();
  int get_vertex_y();
  void set_size(int size);
  int get_size();
  void init_object(GLuint t_id, ImageID img_id, int x, int y, int size);
  void set_object(ImageID img_id, int x, int y);
  

  //stage data handle function
  void load_stage(char* filename);
  void set_state(ImageID img_id, int x, int y);
  ImageID get_state(int x, int y);
  void get_player_position(ImageID img_id, int& x, int&y);
  void init_states(double enemy_percent,
		   double brick_percent,
		   double fire_up_percent,
		   double bomb_up_percent,
		   int num_players);

  std::vector<ImageID> states_;
  std::vector<int> floor_points_;
  std::vector<int> brick_points_;
  int stage_size_;

 private:
  Game();
  ~Game();

  //draw variables
  GLuint texture_id_;
  ImageID image_id_;
  int vertex_x_;
  int vertex_y_;
  int size_;

  static Game *game_;

};

#endif
